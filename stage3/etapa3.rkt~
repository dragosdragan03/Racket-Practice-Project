#lang racket
(require "suffix-tree.rkt")
(require "etapa1.rkt")
(require "etapa2.rkt")

(provide (all-defined-out))

;; Această etapă este dedicată aplicațiilor 
;; arborelui de sufixe:
;; - găsirea unui șablon într-un text
;; - cel mai lung subșir comun a două texte
;; - găsirea unui subșir de lungime dată care se
;;   repetă în text
;; Conform convenției din etapele anterioare, un text
;; este întotdeauna reprezentat ca listă de caractere.
;; Rezultatele funcțiilor de mai jos sunt de asemenea
;; reprezentate ca liste de caractere.


; TODO 1
; Implementați funcția substring? care primește un text și
; un șablon nevid și întoarce true dacă șablonul apare în 
; text, respectiv false în caz contrar.
; Observație: ați implementat deja logica principală a
; acestei căutări în etapa 1, în funcția st-has-pattern?,
; care este un operator al tipului ST. Acum aveți toate
; uneltele necesare implementării operatorului corespunzător
; pentru tipul text (pentru că în etapa 2 ați implementat
; construcția arborelui de sufixe asociat unui text).

(define (substring? text pattern)
  (let ([suffixes-tree (text->cst text)]) ; construiesc st de tip cst
    (st-has-pattern? suffixes-tree pattern))) ; apelez functia st-has-pattern pentru a afla daca se regaseste patternul

; TODO 2
; Implementați funcția longest-common-substring care primește
; două texte și determină cel mai lung subșir comun al
; acestora, folosind algoritmul următor:
; 1. Construiește arborele de sufixe ST1 pentru primul text.
; 2. Pentru fiecare sufix din al doilea text (de la cel mai
;    lung la cel mai scurt), găsește cea mai lungă potrivire 
;    cu sufixele din primul text, urmând căile relevante în ST1.
; 3. Rezultatul final este cel mai lung rezultat identificat
;    la pasul 2 (în caz de egalitate a lungimii, păstrăm-0
;    primul șir găsit).
; Folosiți named let pentru a parcurge sufixele.
; Observație: pentru sufixele din al doilea text nu dorim 
; marcajul de final $ pentru a nu crește artificial lungimea 
; șirului comun cu acest caracter.
; Hint: Revizitați funcția match-pattern-with-label (etapa 1).

(define (first-longest-word words)
  (foldl (lambda (word longest) ; folosesc foldl pentru a parcurge de la stanga la dreapta si sa extrag primul cel mai lung cuvant
           (if (> (length word) (length longest))
               word
               longest))
         null
         words))

(define (longest-prefix small-suffix st) ; o functie ca sa extrag cel mai lung substring dintre sufixul curent si arbore
  (cond
    [(null? small-suffix) '()]
    [(st-has-pattern? st small-suffix) small-suffix] ; inseamna ca am gasit cel mai lung substring
    [else (longest-prefix (drop-right small-suffix 1) st)]))

(define (longest-common-substring text1 text2)
  (let* ([suffixes-tree (text->ast text1)] ; st pentru primul text
         [suffixes-list (get-suffixes text2)]) ; lista de sufixe pentru textul 2
    (let verify ((st suffixes-tree) (suf-list suffixes-list) (result '())) ; folosesc named let pentru a construi lista cu toate substringurile
      (if (null? suf-list)
          (first-longest-word (reverse result)) ; afisez primul cel mai lung substring
          (verify st (cdr suf-list) (cons (longest-prefix (car suf-list) st) result))))))

; TODO 3
; Implementați funcția repeated-substring-of-given-length
; care primește un text și un număr natural len și
; parcurge arborele de sufixe al textului până găsește un
; subșir de lungime len care se repetă în text.
; Dacă acest subșir nu există, funcția întoarce false.
; Obs: din felul în care este construit arborele de sufixe
; (pe baza alfabetului sortat), rezultatul va fi primul 
; asemenea subșir din punct de vedere alfabetic.
; Ideea este următoarea: orice cale în arborele de sufixe
; compact care se termină cu un nod intern (un nod care 
; are copii, nu este o frunză) reprezintă un subșir care
; se repetă, pentru că orice asemenea cale reprezintă un
; prefix comun pentru două sau mai multe sufixe ale textului.
; Folosiți interfața definită în fișierul suffix-tree
; atunci când manipulați arborele.

(define (repeated-substring-of-given-length text len)
  (let* ([suffixes-tree (text->cst text)])
    (define (find-substring branch lungime-ramasa)
      (let* ([label (get-branch-label branch)]
             [lungime-label (length label)]
             [find-subtree (find (get-branch-subtree branch) (- lungime-ramasa lungime-label))])
      (cond
        [(member #\$ label) #f]  ; aici trebuie sa verific daca nodul este frunza
        [(<= lungime-ramasa lungime-label) (take label lungime-ramasa)] ; inseamna ca am ajuns la final si construiesc cuvnatul
        [(equal? #f find-subtree) #f] ; aici trebuie sa mai bag un find de subtree
        [else (append label find-subtree)])))
    (define (find st lungime)
      (cond
        [(null? st) #f] ; inseamna ca n am gasit niciun branch corect
        [(equal? #f (find-substring (first-branch st) lungime)) (find (other-branches st) lungime)] ; inseamna ca trebuie sa ma duc pe alt branch
        [else (find-substring (first-branch st) lungime)]))
    (find suffixes-tree len)))
